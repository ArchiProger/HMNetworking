{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Making-requests","type":"heading","level":2,"text":"Making requests"},{"inlineContent":[{"type":"text","text":"After configuring the client, you can send network requests using its methods. And customize them in a declarative style"}],"type":"paragraph"},{"type":"codeListing","code":["let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    \/\/ Configure request parameters exposed by HttpRequestBuilder","}"],"syntax":"swift"},{"level":2,"type":"heading","text":"Specify a request URL﻿","anchor":"Specify-a-request-URL﻿"},{"inlineContent":[{"type":"text","text":"Additional setting of the page URL"}],"type":"paragraph"},{"anchor":"Query","text":"Query","level":3,"type":"heading"},{"type":"codeListing","syntax":"swift","code":["let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    Query {","        Parameter(name: \"param1\", body: 1)              ","        Parameter(name: \"param2\", body: 2)              ","        Parameter(name: \"param3\", body: 3)              ","    }","}"]},{"level":2,"text":"Set request parameters﻿","type":"heading","anchor":"Set-request-parameters﻿"},{"inlineContent":[{"type":"text","text":"In this section, we’ll see how to specify various request parameters, including an HTTP method, headers."}],"type":"paragraph"},{"type":"heading","text":"Specify an HTTP method","level":3,"anchor":"Specify-an-HTTP-method"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When calling the request function, you can specify the desired HTTP method using the "},{"identifier":"doc:\/\/HMNetworking\/documentation\/HMNetworking\/HttpMethod","isActive":true,"type":"reference"},{"type":"text","text":":"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"It is worth noting that by default the method is ","type":"text"},{"code":"get","type":"codeVoice"}]}],"type":"aside","name":"Note","style":"note"},{"code":["let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    HttpMethod(.post)","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":3,"text":"Headers","anchor":"Headers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To add headers to the request, you can use the following way:"}]},{"type":"codeListing","syntax":"swift","code":["let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    HttpHeaders {","        Header(.contentType(\"application\/json; charset=UTF-8\"))","        Header(.defaultUserAgent)","        Header(name: \"custom\", value: \"body\")","    }","}"]},{"anchor":"Set-request-body","level":2,"type":"heading","text":"Set request body"},{"inlineContent":[{"text":"To set the request text, you need to use ","type":"text"},{"type":"reference","identifier":"doc:\/\/HMNetworking\/documentation\/HMNetworking\/HttpBody","isActive":true},{"type":"text","text":". This structure accepts various types of payload, including plain text, instances of arbitrary classes, form data, byte arrays, and so on. Below we will look at some examples."}],"type":"paragraph"},{"anchor":"Binary-data","text":"Binary data","type":"heading","level":3},{"type":"codeListing","code":["let data: Data = ...","","let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    HttpMethod(.post)","    HttpBody(data: data)","}"],"syntax":"swift"},{"text":"Text","level":3,"anchor":"Text","type":"heading"},{"syntax":"swift","code":["let text = \"Hello, World\"","let data = text.data(using: .utf8)","","guard let data else { throw Exceptios.someException }","","let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    HttpMethod(.post)","    HttpBody(data: data)","}"],"type":"codeListing"},{"type":"heading","text":"Objects","anchor":"Objects","level":3},{"inlineContent":[{"text":"To decode structures to json format, the ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" protocol is used","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct PostDTO: Encodable {","    var id: Int? = nil","    var title: String","    var body: String","    var userId: Int","}","","let post = PostDTO(title: \"Data\", body: \"data serializer\", userId: 1)","","let response = try await client.request(\"https:\/\/www.exapmle.com\") {","    HttpMethod(.post)","    HttpBody(encodable: post)","}"],"type":"codeListing"},{"anchor":"Json","level":3,"type":"heading","text":"Json"},{"code":["let response = try await client.request(\"\/posts\") {","    HttpMethod(.post)","    HttpBody(json: [","        \"title\": \"Data\",","        \"body\": \"data serializer\",","        \"userId\": 1","    ])","}"],"syntax":"swift","type":"codeListing"}]}],"kind":"article","sections":[],"identifier":{"url":"doc:\/\/HMNetworking\/documentation\/HMNetworking\/Making-requests","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"HMNetworking"}],"role":"article","roleHeading":"Article","title":"Making requests"},"variants":[{"paths":["\/documentation\/hmnetworking\/making-requests"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/HMNetworking\/documentation\/HMNetworking"]]},"references":{"doc://HMNetworking/documentation/HMNetworking/HttpBody":{"title":"HttpBody","navigatorTitle":[{"kind":"identifier","text":"HttpBody"}],"abstract":[],"type":"topic","role":"symbol","identifier":"doc:\/\/HMNetworking\/documentation\/HMNetworking\/HttpBody","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HttpBody"}],"kind":"symbol","url":"\/documentation\/hmnetworking\/httpbody"},"doc://HMNetworking/documentation/HMNetworking/HttpMethod":{"role":"symbol","url":"\/documentation\/hmnetworking\/httpmethod","title":"HttpMethod","identifier":"doc:\/\/HMNetworking\/documentation\/HMNetworking\/HttpMethod","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"HttpMethod"}],"kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HttpMethod"}]},"doc://HMNetworking/documentation/HMNetworking":{"identifier":"doc:\/\/HMNetworking\/documentation\/HMNetworking","title":"HMNetworking","url":"\/documentation\/hmnetworking","kind":"symbol","role":"collection","type":"topic","abstract":[]}}}